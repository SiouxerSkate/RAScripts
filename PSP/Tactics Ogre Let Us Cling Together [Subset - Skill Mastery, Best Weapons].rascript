// Tactics Ogre: Let Us Cling Together [Subset - Skill Mastery, Best Weapons]
// #ID = 22866

LocationLookup = {
    0x01: "Palace of the Dead",
    0x02: "Bortegun Fens",
    0x03: "Belmorose Highwilds",
    0x04: "Madura Drift",
    0x05: "Brigantys Castle",
    0x06: "Ndamsa Fortress",
    0x07: "Hagia Banhamuba",
    0x08: "Mount Hedon",
    0x09: "Port Asyton",
    0x0A: "Bahanna Highlands",
    0x0B: "Coritanae Castle",
    0x0C: "Xeod Moors",
    0x0D: "Balmamusa",
    0x0E: "Lambiss Hill",
    0x0F: "Phidoch Castle",
    0x10: "Mount Weobry",
    0x11: "Psonji Weald",
    0x12: "Lake Bordu",
    0x13: "Tynemouth Hill",
    0x14: "Kysaro",
    0x15: "Qadriga Fortress",
    0x16: "Iorumza Canyon",
    0x17: "The Arkhaiopolis of Rhime",
    0x18: "Golborza Plain",
    0x19: "Almorica Castle",
    0x1A: "Golyat",
    0x1B: "Geyld Fortress",
    0x1C: "Barnicia Castle",
    0x1D: "Boulder Sands",
    0x1E: "Oeram",
    0x1F: "The Royal City Of Heim",
    0x20: "Boed Fortress",
    0x21: "The Hanging Gardens",
    0x22: "Neimrahava Wood",
    0x23: "Grimsby",
    0x24: "Gecho Fortress",
    0x2A: "Vasque",
    0x2B: "Lhazan Fortress",
    0x25: "Phorampa Wildwood",
    0x26: "Port Omish",
    0x27: "The Pirate's Graveyard",
    0x28: "Rhea Boum Aqueduct",
    0x29: "The Riesan Way",
    0x2c: "San Brosa Ruins",
    0x2e: "The Vanessan Way",
    0x30: "Tzorious Field",
    0x31: "The Leupha Coast",
}

TitleLookup = {
    0x00: "Boy Of No Title",
    0x01: "Hero of Golyat",
    0x02: "Corpse Dancer",
    0x03: "Freedom Fighter",
    0x04: "Peace Seeker",
    0x05: "He Who Fights Alone",
    0x06: "The Impasive",
    0x07: "Butcher Of Golyat",
    0x08: "Fallen Hero",
    0x09: "The Merciful",
    0x0A: "The Unfaithful",
    0x0B: "Man of Proven Worth",
    0x0C: "Helpful Spirit",
    0x0D: "The Selfish",
    0x0E: "Man Among Friends",
    0x0F: "The Unhearing",
    0x10: "Man of Principles",
    0x11: "The Hero Returned",
    0x12: "Piratebane",
    0x13: "Hand Of Justice",
    0x14: "He Who Shuns Duty",
    0x15: "Man of Resolve",
    0x16: "Leader Of Men",
    0x17: "Dark Knight Slayer",
    0x18: "Savior of the Dead",
    0x19: "Freer of Souls",
    0x1A: "Slayer of the Dying",
    0x1B: "Miracle Worker",
    0x1C: "Defender of Almorica",
    0x1D: "Man of Deeds",
    0x1E: "Untarnished Hero",
    0x1F: "The Unflinching",
    0x20: "Arbiter of the Game",
    0x21: "He of Open Eyes",
    0x22: "Dark Knight Scourge",
    0x23: "Man of the Sword",
    0x24: "Man of No Illusions",
    0x25: "The Conqueror",
    0x26: "Destroyer of Galgastan",
    0x27: "He Who Walks in Darkness",
    0x28: "Southron Liberator",
    0x29: "Blood-stained Hero",
    0x2A: "Man of Peace",
    0x2B: "Princess Slayer",
    0x2C: "Tragic Hero",
    0x2D: "Princess Savior",
    0x2E: "Bringer of Peace",
    0x2F: "Bringer of Strife",
    0x30: "Bringer of Order",
    0x31: "Ruler of Valeria",
    0x32: "Grave Robber",
    0x33: "He Who Treads Holy Ground",
    0x34: "He Who Walks the Deeps",
    0x35: "Necromancer Scourge",
    0x36: "Dynast-King Slayer",
    0x37: "Dark Warlord Slayer",
    0x38: "One-eyed Knight Slayer",
    0x39: "He Who is NULL",
    0x3A: "He Who is NULL",
    0x3B: "He Who is NULL",
    0x3C: "He Who is NULL",
    0x3D: "He Who is NULL",
    0x3E: "He Who is NULL",
    0x3F: "He Who is NULL",
    0x40: "He Who is NULL",
    0x41: "Slayer of One",
    0x42: "Slayer of Two",
    0x43: "Slayer of Three",
    0x44: "Slayer of Four",
    0x45: "Slayer of Five",
    0x46: "Slayer of Six",
    0x47: "Slayer of Seven",
    0x48: "Slayer of Eight",
    0x49: "Slayer of Nine",
    0x4A: "Slayer of Ten",
    0x4B: "Slayer of Eleven",
    0x4C: "Slayer of Twelve",
    0x4D: "Seal Breaker",
    0x4E: "Slayer of the Necromancer Lord",
    0x4F: "Slayer of the Sea Watch",
    0x50: "Slayer of the Wind Watch",
    0x51: "Slayer of the Earth Watch",
    0x52: "Slayer of the Lightning Watch",
    0x53: "Slayer of the Water Watch",
    0x54: "Slayer of the Fire Watch",
    0x55: "Slayer of the Ice Watch",
    0x56: "The Tragic King",
    0x57: "The Bloodbound",
    0x58: "Savior of Valeria",
    0x59: "Captain of Fate",
    0x5A: "Concord King",
    0x5B: "The Just",
    0x5C: "Light Unto the Dark",
    0x5D: "Man of No Regrets",
    0x5E: "He Who Stops the Wheel",
    0x5F: "Hero Among Men",
    0x60: "Gifted Warrior",
    0x61: "Lord of the Battlefield",
    0x62: "Master of Tactics",
    0x63: "Concord King Unbloodied",
    0x64: "Hero King Unscathed",
    0x65: "He Who is NULL",
    0x66: "He Who CRASHED THE GAME",
}

MonthLookup = {
    0x00: "Godscale",
    0x01: "Earthscale",
    0x02: "Waterscale",
    0x03: "Shadowscale",
    0x04: "Whitescale",
    0x05: "Flamescale",
    0x06: "Windscale",
    0x07: "Goldscale",
    0x08: "Stormscale",
    0x09: "Darkscale",
    0x0A: "Seascale",
    0x0B: "Blackscale",
    0x0C: "Twinscale",
    0x0D: "Firescale",
    0x0E: "Lightscale",
}


//////////FUNCTION DEFINITION//////////
function Location() => word(0xafd956)
function Title() => word(0x00b10fb8)
function DeltaTitle() => prev(word(0x00b10fb8))
function ObtainItem(mem) => prev(byte(mem)) < byte(mem)
function InBattle() => prev(byte(0xd40050)) == 1
function NotInBattle() => prev(byte(0xd40050)) == 0
//////////CHEEVO DEFINITION//////////

/////Batle Item Colection Cheevos////////
/////Item Dict - Used for cheevo for grabbing certain items. 
/////Key - Name of Item
/////value = [points, list of location hex values, in battle memory location, Cheevo Title, "Obtain" or "Craft" with "a" or "an", extended description]

BattleItemDict = {
    "Trueno's Scales":          [05, [0x21, 0x1A], 0xd52ba5, "Magewyrm's Fists", "Obtain a ", "."],
    "Vainateya's Talons":       [05, [0x06], 0xd52ba6, "Golden Wing Talons", "Obtain a ", "."],
    "Huitzilopochtli's Rays":   [05, [0x01], 0xd52ba7, "God Of Sun and Harvest", "Obtain a ", "."],
    
    "Pinion Blade":             [05, [0x01], 0xd52bbf, "Arcane Gryphon Feathers", "Obtain a ", "."],
    "Assassin Blade":           [05, [0x01], 0xd52bc0, "Blackened Blade", "Obtain an ", "."],
    
    "Nifrit Sword":             [05, [0x21, 0x1A], 0xd52bd7, "Befouled Blade", "Obtain a ", "."],
    "Odiferous Waster":         [05, [0x01], 0xd52bda, "Boogey Blade", "Obtain an ", "."],
    "Ambicion":                 [50, [0x1A], 0xd52bdc, "Times of Turmoil and War", "Obtain an ", " by defeating Dark Knight Lanselot with just Denam, Catuia, and Vyce during the CODA fight."],
    "Oracion":                  [05, [0x2C], 0xd52bdf, "Answer To Prayers", "Obtain an ", "."],
    "Fafnir's Heart":           [05, [0x01], 0xd52be0, "Heart of the Darkwyrm", "Obtain a ", "."],
    "Leksar's Beloved":         [05, [0x2C], 0xd52be1, "Freerer of Shackles", "Obtain a ", "."],
    
    "Ogre Blade":               [05, [0x01], 0xd52bdb, "Shadow Gatherer", "Obtain an ", "."],
    "Balmug":                   [05, [0x1A], 0xd52bf9, "The Dragon Slayer", "Obtain a ", "."],
    "Ishana":                   [05, [0x01], 0xd52bfa, "Sacred Water", "Obtain an ", "."],
    "Durandal":                 [05, [0x2C], 0xd52bfb, "Holy Gift of Heaven", "Obtain a ", "."],
    "Moon Blade":               [05, [0x01], 0xd52bfc, "Crescent Blade of the Green Dragon", "Obtain a ", "."],
    
    "Glarmrock":                [05, [0x0F, 0x20, 0x1A], 0xd52c11, "The Fallen Star", "Obtain a ", "."],
    "Kshuparaka":               [05, [0x01], 0xd52c15, "Axe of Cold", "Obtain a ", "."],
    "Shaytan's Bulova":         [05, [0x01], 0xd52c16, "Grim Reaper", "Obtain a ", "."],
    "Rune Axe":                 [05, [0x2C], 0xd52c17, "The Gleaming Blade", "Obtain a ", "."],
    
    "Volcaetus":                [05, [0x1A], 0xd52c2c, "Legend of the Volcano", "Obtain a ", "."],
    "Tlaloc's Bolt":            [05, [0x1B], 0xd52c30, "Catastrophe", "Obtain a ", "."],
    "Pavana":                   [05, [0x2C], 0xd52c31, "Lightning Spear", "Obtain a ", "."],
    "Dark Spear":               [05, [0x01], 0xd52c32, "Conduit For Sorrow and Despair", "Obtain a ", "."],
    
    "Sanscion":                 [05, [0x21, 0x1A], 0xd52c49, "Overlord of the Abyss", "Obtain a ", "."],
    "Dagda's Hammer":           [05, [0x01], 0xd52c4c, "Blood of the Darklord", "Obtain a ", "."],
    "Walitas":                  [05, [0x01], 0xd52c4d, "Great Father Philaha", "Obtain a ", "."],
    
    "Golok":                    [05, [0x01], 0xd52c66, "Devourer of Dragons", "Obtain a ", "."],
    "Bakasura":                 [05, [0x2C], 0xd52c67, "Dark General", "Obtain a ", "."],
    "Shimmer Sword":            [05, [0x01], 0xd52c68, "Fallen Star of the East", "Obtain a ", "."],
    
    "Beadbound Blade":          [05, [0x01], 0xd52c81, "Binder of the Ice Demon", "Obtain a ", "."],
    "Ogresbane":                [05, [0x01], 0xd52c82, "Driver of Evil", "Obtain an ", "."],
    "Sweepblade":               [05, [0x01], 0xd52c83, "Blood-Red Temper", "Obtain a ", "."],
    
    "Sage Staff":               [05, [0x2C], 0xd52c9b, "Titan's Rib", "Obtain a ", "."],
    "Wiseman's Staff":          [05, [0x01], 0xd52c9c, "Lore Master", "Obtain a ", "."],
    
    "Rose Whip":                [05, [0x0F, 0x14, 0x1A], 0xd52ca1, "The Scarlet Rose", "Obtain a ", "."],
    "Supple Whip":              [05, [0x1A], 0xd52ca5, "Ozma's Leather Daddy", "Obtain a ", "."],
    "Cat o' Nine Tails":        [05, [0x01], 0xd52ca6, "Slave Master", "Obtain a ", "."],
    
    "Gran Grimoire":            [05, [0x01], 0xd52cb0, "Transcedental Meditation", "Obtain a ", "."],
    
    "Livela's Harp":            [05, [0x2C], 0xd52cba, "Divine Song of God", "Obtain a ", "."],
    
    "Rahula":                   [05, [0x2C], 0xd52cc4, "Aditi's Dart", "Obtain a ", "."],
    
    "Ji'ygla's Bow":            [05, [0x01], 0xd52cdd, "Evil Spirit's Bones", "Obtain a ", "."],
    "Pajra":                    [05, [0x2C], 0xd52cde, "Bow of Light", "Obtain a ", "."],
    "Centeotl's Rib":           [05, [0x2C], 0xd52cdf, "Belly of the Magewyrm", "Obtain a ", "."],
    
    "Ysaar":                    [05, [0x01], 0xd52cf8, "Djinn's Tornado", "Obtain an ", "."],
    "Barad":                    [05, [0x01], 0xd52cf9, "Bolts of Ice", "Obtain a ", "."],
    "Raed":                     [05, [0x01], 0xd52cfa, "Ylmarch's Lightning", "Obtain a ", "."],
    
    "Snub Fusil":               [05, [0x01], 0xd52d03, "Piercing Shot", "Obtain a ", "."],
    "Longgun":                  [05, [0x01], 0xd52d04, "Sniper Rifle", "Obtain a ", "."],
    
    "Ogre Shield":              [05, [0x01], 0xd52d34, "Abyssal Shield", "Obtain an ", "."], 
    "Aegis":                    [05, [0x2C], 0xd52d35, "Daedalus' Defense", "Obtain an ", "."], 
    
    "Glistening Helm":          [05, [0x01, 0x27], 0xd52d43, "Sweat Band", "Obtain a ", "."],
    "Ogre Helm":                [05, [0x01], 0xd52d44, "Abyssal Helm", "Obtain an ", "."],
    "Skull Mask":               [05, [0x01], 0xd52d45, "Demon's Skull", "Obtain a ", "."],
    "Fruede Helm":              [05, [0x2C], 0xd52d46, "Helm Of the Blessed", "Obtain a ", "."],
    
    "Reeking Armor":            [05, [0x01, 0x27], 0xd52d58, "Arms of Eternal Stench", "Obtain a ", "."],
    "Ji'ygla's Darkcoat":       [05, [0x01, 0x27], 0xd52d68, "Coat of Bones", "Obtain a ", "."],
    "Thanatos Armor":           [05, [0x01], 0xd52d70, "Lifeforce Thief", "Obtain a ", "."],
    "Garb of Sages":            [05, [0x2C], 0xd52d71, "Magical Threads", "Obtain a ", "."],
    "Ogre Armor":               [05, [0x01], 0xd52d72, "Abyssal Armor", "Obtain a ", "."],
    
    "Musty Gauntlets":          [05, [0x01, 0x27], 0xd52d85, "Work Gloves", "Obtain a ", "."],
    "Ji'ygla's Bracers":        [05, [0x01, 0x27], 0xd52d86, "Finger Bones", "Obtain a ", "."],
    "Luminant Gauntlets":       [05, [0x2C], 0xd52d89, "Shining Gauntlets", "Obtain a ", "."], 
    "Snipe Bracers":            [05, [0x01], 0xd52d8b, "Ganta Gauntlets", "Obtain a ", "."], 
    
    "Snipe Gators":             [05, [0x22], 0xd52da2, "Ganta Boots", "Obtain a ", "."],
}


function BattleItemCheevos()
{
    for key in BattleItemDict
    {
        value_list = BattleItemDict[key]
        title = value_list[3]
        description = value_list[4] + key + value_list[5]
        points = value_list[0]
        location_trigger = always_false()
        for i in value_list[1]
        {
        location_trigger = location_trigger || Location() == i
        }
        trigger = ObtainItem(value_list[2]) && InBattle() && DeltaTitle() != 0 && location_trigger
        achievement(title, description, points, trigger)
    }
}

BattleItemCheevos()

///Cursed Weapon Cheevos
weapon_list = ["Fist", "Dagger", "Sword (1H)", "Sword (2H)", "Axe", "Spear", "Hammer", "Katana (1H)",
               "Katana (2H)", "Cudgel", "Whip", "Spellbook", "Instrument", "Blowgun", "Bow", "Crossbow", "Fusil"]

function BattleCursedWeapons()
{
    memory_start = 0xd52dff
    iterator = 0
    for i in weapon_list
    {
        title = "The Cursed " + i
        description = "Obtain the Cursed weapon for the " + i + " weapon type."
        points = 5
        trigger = ObtainItem(memory_start + iterator) && InBattle() && DeltaTitle() != 0 && Location() == 0x01
        achievement(title, description, points, trigger)
        iterator = iterator + 1
    }
}

BattleCursedWeapons()

/////Single Item Crafting Cheevos////////
/////Item Dict - Used for cheevo for crafting certain items. 
/////Key - Name of Item
/////value = [points, memory location, Cheevo Title, "Obtain" or "Craft" with "a" or "an"]

CraftDict = {
    "Urchin Bola +1":           [05, 0xae836e, "Slinging Stones", "Craft an "],
    "Lobber +2":                [05, 0xae836e, "Lobbing Lobber", "Craft a "],
    "Medusa Shield":            [05, 0xae82ba, "Malevolent Gaze", "Craft a "],
    "Daedalus Bracers":         [05, 0xae830e, "Arm of the Dragon Lord", "Craft a "],
}

function InCityLocation()
{
    trigger = always_false()
    trigger = trigger || Location() == 0x05 || Location() == 0x09 || Location() == 0x0B || Location() == 0x0D ||
              Location() == 0x0F || Location() == 0x14 || Location() == 0x17 || Location() == 0x19 || 
              Location() == 0x1A || Location() == 0x1C || Location() == 0x1E || Location() == 0x1F ||
              Location() == 0x23 || Location() == 0x26
    return trigger
}
 
function CraftItemCheevos()
{
    for key in CraftDict
    {
        value_list = CraftDict[key]
        title = value_list[2]
        description = value_list[3] + key + "."
        points = value_list[0]
        trigger = ObtainItem(value_list[1]) && NotInBattle() && DeltaTitle() != 0 && InCityLocation()
        achievement(title, description, points, trigger)
    }
}

CraftItemCheevos()


///Class Mastery Cheevos
ClassDict = {
    //Generics Classes
    "Warrior":              [05, 0xae7e98, "Master of None"],
    "Archer":               [5, 0xae7ea0, "Mainstay of Ranged Weaponary"],
    "Wizard/Enchantress":   [5, 0xae7ea8, "Magical Profiencey"],
    "Cleric":               [5, 0xae7eb0, "Healing the Masses"],
    "Rune Fencer/Valkyrie": [5, 0xae7eb8, "Mage-Knight"],
    "Knight":               [5, 0xae7ec0, "Front Line Warrior"],
    "Terror Knight":        [5, 0xae7ec8, "Tormented Spirits"],
    "Berserker":            [5, 0xae7ed0, "Caution to the Wind"],
    "Swordmaster":          [5, 0xae7ed8, "War Dancer"],
    "Dragoon":              [5, 0xae7ee0, "Dragon Master"],
    "Ninja/Kunoichi":       [5, 0xae7ee8, "From the Shadows"],
    "Rogue":                [5, 0xae7ef0, "Diamond in the Rough"],
    "Fusilier":             [5, 0xae7ef8, "Front Gunner"],
    "Beast Tamer":          [5, 0xae7f00, "The Beast Master"],
    "Warlock/Witch":        [5, 0xae7f08, "Master of Magic"],
    "Necromancer":          [5, 0xae7f10, "Commander of the Dead"],
    "Lich":                 [10, 0xae7f18, "Master of Death"],
    "Divine Knight":        [10, 0xae7f20, "Divine Gift"],
    
    //Humanoid Monster Classes
    "Hoplite":              [5, 0xae7f28, "Monster Magic"],
    "Juggernaut":           [5, 0xae7f30, "Jug of Death"],
    "Matriarch":            [5, 0xae7f38, "Top of the Family"],
    "Familiar":             [5, 0xae7f40, "Faries Wear Boots"],
    
    //Dragon Classes
    "Cloud Dragon":         [5, 0xae7f68, "Master of Clouds"],
    "Earth Dragon":         [5, 0xae7f70, "Master of Earth"],
    "Thunder Dragon":       [5, 0xae7f78, "Master of Thunder"],
    "Flood Dragon":         [5, 0xae7f80, "Master of Flood"],
    "Flame Dragon":         [5, 0xae7f88, "Master of Flame"],
    "Frost Dragon":         [5, 0xae7f90, "Master of Frost"],
    "Arc Dragon":           [5, 0xae7f98, "Master of Light"],
    "Dark Dragon":          [5, 0xae7fa0, "Master of Darkness"],
    "Hydra":                [10, 0xae7fa8, "Three Headed Menace"],
    
    //Golem Classes
    "Clay Golem":           [5, 0xae7fb0, "Master of Clay"],
    "Stone Golem":          [5, 0xae7fb8, "Master of Stone"],
    "Iron Golem":           [5, 0xae7fc0, "Master of Iron"],
    "Baldur Golem":         [5, 0xae7fc8, "Master of Baldur"],
    
    //Monster Classes
    "Gryphon":              [5, 0xae7fd0, "Master of the Skies"],
    "Cockatrice":           [5, 0xae7fd8, "Stoned Chicken"],
    "Octopus":              [5, 0xae7fe0, "Master of the Seas"],
    "Cyclops":              [5, 0xae7fe8, "Beast of Legend"],
    
    //Special Human Classes
    "Lord":                 [25, 0xae8028, "Mantle of Valeria"],
    "Ranger":               [10, 0xae8030, "Wandering Warrior"],
    "Priest":               [25, 0xae8038, "Venerated Cleric"],
    "Dark Priest":          [25, 0xae8040, "The Evil Priest"],
    "Princess":             [25, 0xae8048, "Ruler of Valeria"],
    "Paladin":              [25, 0xae8050, "Knight Among Knight"],
    "Astromancer":          [25, 0xae8058, "Magician of the Stars"],
    "Vartan":               [10, 0xae8060, "Warrior of the Skies"],
    "White Knight":         [10, 0xae8068, "White Lines"],
    "Shaman":               [10, 0xae8070, "Oracle of Valeria"],
    "Wicce":                [50, 0xae8078, "IM NOT A WITCH"],
    "Songstress":           [25, 0xae8080, "Master of Songs"],
    "Bucaneer":             [10, 0xae8088, "Dread Pirate"],
    "Knight Commander":     [25, 0xae80c0, "Dark Knight Controller"],
}


function ClassMastery()
{
    for key in ClassDict
    {
        value_list = ClassDict[key]
        title = value_list[2]
        description = "Master the " + key + " class."
        points = value_list[0]
        trigger = InBattle() && DeltaTitle() != 0 && prev(byte(value_list[1])) == 49 && byte(value_list[1]) == 50 && dword(value_list[1] + 4) >= 48000
        achievement(title, description, points, trigger)
    }
}

ClassMastery()

//Magic Learned Cheevos
/////Magic Dict - Used for cheevo for magics learned
/////Key - Name of Magic
/////value = [points, base roster memory location, base battle memory location, number of bits, Cheevo Title]

MagicLearnedDict = {
    "Air":        [05, 0x00ad8586, 0x00d40212, 18, "Quick as the Wind"],
    "Earth":      [05, 0x00ad8588, 0x00d40214, 18, "Hard as a Rock"],
    "Lightning":  [05, 0x00ad858a, 0x00d40216, 18, "Electric Feel"],
    "Water":      [05, 0x00ad858c, 0x00d40218, 18, "Splish Splash"],
    "Fire":       [05, 0x00ad858f, 0x00d4021b, 18, "Blaze It Up"],
    "Ice":        [05, 0x00ad8591, 0x00d4021d, 18, "Cold As Ice"],
    "Divine":     [05, 0x00ad8593, 0x00d4021f, 40, "Touched By An Angel"],
    "Dark":       [05, 0x00ad8598, 0x00d40224, 32, "In a World of Pain"],
    "Draconic":   [25, 0x00ad859c, 0x00d40228, 29, "Master of All"],
    "Necromancy": [10, 0x00ad85a0, 0x00d4022c, 13, "Scourge of Existence"],
    "Ninjitsu":   [05, 0x00ad85a2, 0x00d4022e, 19, "In the Shadows"],
    "War Dances": [05, 0x00ad85a5, 0x00d40231, 08, "Dance Party"],
    "Songs":      [05, 0x00ad85a6, 0x00d40232, 07, "Songstress of Valeria"],  
}

function ProcessMagicRoster(key, value_list)
{
    trigger = always_false()
    char_offset = 0x48C
    for i in range(0, 49)
    {
        mem_char = value_list[1] + (char_offset * i)
        trigger = trigger || (NotInBattle() && ProcessMagicBits(key, mem_char, value_list))
    }
    return trigger
}

function ProcessMagicBattle(key, value_list)
{
    trigger = always_false()
    char_offset = 0x520
    mem_base_char = 0xd40130	
    alliegance_offset = 0x52
    for i in range(0, 11)
    {
        mem_char = value_list[2] + (char_offset * i)
        mem_base_char = mem_base_char + (char_offset * i)
        trigger = trigger || (InBattle() && byte(mem_base_char + alliegance_offset) == 0x13 && ProcessMagicBits(key, mem_char, value_list))
    }
    return trigger
}

function ProcessMagicBits(key, memory_start, value_list)
{
    if key == "Air" || key == "Fire"
    {
        trigger = (bit1(memory_start) + bit2(memory_start) + bit3(memory_start) + bit4(memory_start) + bit5(memory_start) + bit6(memory_start) + 
                  bit7(memory_start) + bit0(memory_start + 1) + bit1(memory_start + 1) + bit2(memory_start + 1) + bit3(memory_start + 1) + 
                  bit4(memory_start + 1) + bit5(memory_start + 1) + bit6(memory_start + 1) + bit7(memory_start + 1) + bit0(memory_start + 2) + 
                  bit1(memory_start + 2) + bit2(memory_start + 2)) == value_list[3]
                  &&
                  (prev(bit1(memory_start)) + prev(bit2(memory_start)) + prev(bit3(memory_start)) + prev(bit4(memory_start)) + prev(bit5(memory_start)) +
                  prev(bit6(memory_start)) + prev(bit7(memory_start)) + prev(bit0(memory_start + 1)) + prev(bit1(memory_start + 1)) + 
                  prev(bit2(memory_start + 1)) + prev(bit3(memory_start + 1)) + prev(bit4(memory_start + 1)) + prev(bit5(memory_start + 1)) + 
                  prev(bit6(memory_start + 1)) + prev(bit7(memory_start + 1)) + prev(bit0(memory_start + 2)) + prev(bit1(memory_start + 2)) + 
                  prev(bit2(memory_start + 2))) == value_list[3] - 1
    }
    else if key == "Earth" || key == "Ice"
    {
        trigger = (bit3(memory_start) + bit4(memory_start) + bit5(memory_start) + bit6(memory_start) + bit7(memory_start) + bit0(memory_start + 1) + 
                  bit1(memory_start + 1) + bit2(memory_start + 1) + bit3(memory_start + 1) + bit4(memory_start + 1) + bit5(memory_start + 1) + 
                  bit6(memory_start + 1) + bit7(memory_start + 1) + bit0(memory_start + 2) + bit1(memory_start + 2) + bit2(memory_start + 2) + 
                  bit3(memory_start + 2) + bit4(memory_start + 2)) == value_list[3]
                  &&
                  (prev(bit3(memory_start)) + prev(bit4(memory_start)) + prev(bit5(memory_start)) + prev(bit6(memory_start)) + prev(bit7(memory_start)) +
                  prev(bit0(memory_start + 1)) + prev(bit1(memory_start + 1)) + prev(bit2(memory_start + 1)) + prev(bit3(memory_start + 1)) + 
                  prev(bit4(memory_start + 1)) + prev(bit5(memory_start + 1)) + prev(bit6(memory_start + 1)) + prev(bit7(memory_start + 1)) + 
                  prev(bit0(memory_start + 2)) + prev(bit1(memory_start + 1)) + prev(bit2(memory_start + 2)) + prev(bit3(memory_start + 2)) + 
                  prev(bit4(memory_start + 2))) == value_list[3] - 1
    }
    else if key == "Lightning"
    {
        trigger = (bit5(memory_start) + bit6(memory_start) + bit7(memory_start) + bit0(memory_start + 1) + bit1(memory_start + 1) + bit2(memory_start + 1) + 
                  bit3(memory_start + 1) + bit4(memory_start + 1) + bit5(memory_start + 1) + bit6(memory_start + 1) + bit7(memory_start + 1) + 
                  bit0(memory_start + 2) + bit1(memory_start + 2) + bit2(memory_start + 2) + bit3(memory_start + 2) + bit4(memory_start + 2) + 
                  bit5(memory_start + 2) + bit6(memory_start + 2)) == value_list[3]
                  &&
                  (prev(bit5(memory_start)) + prev(bit6(memory_start)) + prev(bit7(memory_start)) + prev(bit0(memory_start + 1)) + prev(bit1(memory_start + 1)) +
                  prev(bit2(memory_start + 1)) + prev(bit3(memory_start + 1)) + prev(bit4(memory_start + 1)) + prev(bit5(memory_start + 1)) + 
                  prev(bit6(memory_start + 1)) + prev(bit7(memory_start + 1)) + prev(bit0(memory_start + 2)) + prev(bit1(memory_start + 2)) + 
                  prev(bit2(memory_start + 2)) + prev(bit3(memory_start + 1)) + prev(bit4(memory_start + 2)) + prev(bit5(memory_start + 2)) + 
                  prev(bit6(memory_start + 2))) == value_list[3] - 1
    }
    else if key == "Water"
    {
        trigger = (bit7(memory_start) + bit0(memory_start + 1) + bit1(memory_start + 1) + bit2(memory_start + 1) + bit3(memory_start + 1) + 
                  bit4(memory_start + 1) + bit5(memory_start + 1) + bit6(memory_start + 1) + bit7(memory_start + 1) + bit0(memory_start + 2) + 
                  bit1(memory_start + 2) + bit2(memory_start + 2) + bit3(memory_start + 2) + bit4(memory_start + 2) + bit5(memory_start + 2) + 
                  bit6(memory_start + 2) + bit7(memory_start + 2) + bit0(memory_start + 3)) == value_list[3]
                  &&
                  (prev(bit7(memory_start)) + prev(bit0(memory_start + 1)) + prev(bit1(memory_start + 1)) + prev(bit2(memory_start + 1)) + 
                  prev(bit3(memory_start + 1)) + prev(bit4(memory_start + 1)) + prev(bit5(memory_start + 1)) + prev(bit6(memory_start + 1)) +
                  prev(bit7(memory_start + 1)) + prev(bit0(memory_start + 2)) + prev(bit1(memory_start + 2)) + prev(bit2(memory_start + 2)) + 
                  prev(bit3(memory_start + 2)) + prev(bit4(memory_start + 2)) + prev(bit5(memory_start + 2)) + prev(bit6(memory_start + 2)) + 
                  prev(bit7(memory_start + 2)) + prev(bit0(memory_start + 3))) == value_list[3] - 1
    }
    else if key == "Divine"
    {
        trigger = (bit5(memory_start) + bit6(memory_start) + bit7(memory_start) + bit0(memory_start + 1) + bit1(memory_start + 1) + bit2(memory_start + 1) + 
                  bit3(memory_start + 1) + bit4(memory_start + 1) + bit5(memory_start + 1) + bit6(memory_start + 1) + bit7(memory_start + 1) + 
                  bit0(memory_start + 2) + bit1(memory_start + 2) + bit2(memory_start + 2) + bit3(memory_start + 2) + bit4(memory_start + 2) + 
                  bit5(memory_start + 2) + bit6(memory_start + 2) + bit7(memory_start + 2) + bit0(memory_start + 3) + bit1(memory_start + 4) + 
                  bit2(memory_start + 3) + bit3(memory_start + 3) + bit4(memory_start + 3) + bit5(memory_start + 3) + bit6(memory_start + 3) + 
                  bit7(memory_start + 3) + bit0(memory_start + 4) + bit1(memory_start + 4) + bit2(memory_start + 4) + bit3(memory_start + 4) + 
                  bit4(memory_start + 4) + bit5(memory_start + 4) + bit6(memory_start + 4) + bit7(memory_start + 4) + bit0(memory_start + 5) + 
                  bit1(memory_start + 5) + bit2(memory_start + 5) + bit3(memory_start + 5) + bit4(memory_start + 5)) == value_list[3]
                  &&
                  (prev(bit5(memory_start)) + prev(bit6(memory_start)) + prev(bit7(memory_start)) + prev(bit0(memory_start + 1)) + prev(bit1(memory_start + 1)) +
                  prev(bit2(memory_start + 1)) + prev(bit3(memory_start + 1)) + prev(bit4(memory_start + 1)) + prev(bit5(memory_start + 1)) + 
                  prev(bit6(memory_start + 1)) + prev(bit7(memory_start + 1)) + prev(bit0(memory_start + 2)) + prev(bit1(memory_start + 2)) +
                  prev(bit2(memory_start + 2)) + prev(bit3(memory_start + 2)) + prev(bit4(memory_start + 2)) + prev(bit5(memory_start + 2)) + 
                  prev(bit6(memory_start + 2)) + prev(bit7(memory_start + 2)) + prev(bit0(memory_start + 3)) + prev(bit1(memory_start + 3)) +
                  prev(bit2(memory_start + 3)) + prev(bit3(memory_start + 3)) + prev(bit4(memory_start + 3)) + prev(bit5(memory_start + 3)) + 
                  prev(bit6(memory_start + 3)) + prev(bit7(memory_start + 3)) + prev(bit0(memory_start + 4)) + prev(bit1(memory_start + 4)) +
                  prev(bit2(memory_start + 4)) + prev(bit3(memory_start + 4)) + prev(bit4(memory_start + 4)) + prev(bit5(memory_start + 4)) + 
                  prev(bit6(memory_start + 4)) + prev(bit7(memory_start + 4)) + prev(bit0(memory_start + 5)) + prev(bit1(memory_start + 5)) +
                  prev(bit2(memory_start + 5)) + prev(bit3(memory_start + 5)) + prev(bit4(memory_start + 5))) == value_list[3] - 1
    }
    else if key == "Dark"
    {
        trigger = (bit5(memory_start) + bit6(memory_start) + bit7(memory_start) + bit0(memory_start + 1) + bit1(memory_start + 1) + bit2(memory_start + 1) + 
                  bit3(memory_start + 1) + bit4(memory_start + 1) + bit5(memory_start + 1) + bit6(memory_start + 1) + bit7(memory_start + 1) + 
                  bit0(memory_start + 2) + bit1(memory_start + 2) + bit2(memory_start + 2) + bit3(memory_start + 2) + bit4(memory_start + 2) + 
                  bit5(memory_start + 2) + bit6(memory_start + 2) + bit7(memory_start + 2) + bit0(memory_start + 3) + bit1(memory_start + 4) + 
                  bit2(memory_start + 3) + bit3(memory_start + 3) + bit4(memory_start + 3) + bit5(memory_start + 3) + bit6(memory_start + 3) + 
                  bit7(memory_start + 3) + bit0(memory_start + 4) + bit1(memory_start + 4) + bit2(memory_start + 4) + bit3(memory_start + 4) + 
                  bit4(memory_start + 4)) == value_list[3]
                  &&
                  (prev(bit5(memory_start)) + prev(bit6(memory_start)) + prev(bit7(memory_start)) + prev(bit0(memory_start + 1)) + prev(bit1(memory_start + 1)) +
                  prev(bit2(memory_start + 1)) + prev(bit3(memory_start + 1)) + prev(bit4(memory_start + 1)) + prev(bit5(memory_start + 1)) + 
                  prev(bit6(memory_start + 1)) + prev(bit7(memory_start + 1)) + prev(bit0(memory_start + 2)) + prev(bit1(memory_start + 2)) +
                  prev(bit2(memory_start + 2)) + prev(bit3(memory_start + 2)) + prev(bit4(memory_start + 2)) + prev(bit5(memory_start + 2)) + 
                  prev(bit6(memory_start + 2)) + prev(bit7(memory_start + 2)) + prev(bit0(memory_start + 3)) + prev(bit1(memory_start + 3)) +
                  prev(bit2(memory_start + 3)) + prev(bit3(memory_start + 3)) + prev(bit4(memory_start + 3)) + prev(bit5(memory_start + 3)) + 
                  prev(bit6(memory_start + 3)) + prev(bit7(memory_start + 3)) + prev(bit0(memory_start + 4)) + prev(bit1(memory_start + 4)) +
                  prev(bit2(memory_start + 4)) + prev(bit3(memory_start + 4)) + prev(bit4(memory_start + 4))) == value_list[3] - 1
    }
    else if key == "Draconic"
    {
        trigger = (bit5(memory_start) + bit6(memory_start) + bit7(memory_start) + bit0(memory_start + 1) + bit1(memory_start + 1) + bit2(memory_start + 1) + 
                  bit3(memory_start + 1) + bit4(memory_start + 1) + bit5(memory_start + 1) + bit6(memory_start + 1) + bit7(memory_start + 1) + 
                  bit0(memory_start + 2) + bit1(memory_start + 2) + bit2(memory_start + 2) + bit3(memory_start + 2) + bit4(memory_start + 2) + 
                  bit5(memory_start + 2) + bit6(memory_start + 2) + bit7(memory_start + 2) + bit0(memory_start + 3) + bit1(memory_start + 3) + 
                  bit2(memory_start + 3) + bit3(memory_start + 3) + bit4(memory_start + 3) + bit5(memory_start + 3) + bit6(memory_start + 3) + 
                  bit7(memory_start + 3) + bit0(memory_start + 4) + bit1(memory_start + 4) + bit2(memory_start + 4) + bit3(memory_start + 4)) == value_list[3]
                  &&
                  (prev(bit5(memory_start)) + prev(bit6(memory_start)) + prev(bit7(memory_start)) + prev(bit0(memory_start + 1)) + prev(bit1(memory_start + 1)) +
                  prev(bit2(memory_start + 1)) + prev(bit3(memory_start + 1)) + prev(bit4(memory_start + 1)) + prev(bit5(memory_start + 1)) + 
                  prev(bit6(memory_start + 1)) + prev(bit7(memory_start + 1)) + prev(bit0(memory_start + 2)) + prev(bit1(memory_start + 2)) +
                  prev(bit2(memory_start + 2)) + prev(bit3(memory_start + 2)) + prev(bit4(memory_start + 2)) + prev(bit5(memory_start + 2)) + 
                  prev(bit6(memory_start + 2)) + prev(bit7(memory_start + 2)) + prev(bit0(memory_start + 3)) + prev(bit1(memory_start + 3)) +
                  prev(bit2(memory_start + 3)) + prev(bit3(memory_start + 3)) + prev(bit4(memory_start + 3)) + prev(bit5(memory_start + 3)) + 
                  prev(bit6(memory_start + 3)) + prev(bit7(memory_start + 3)) + prev(bit0(memory_start + 4)) + prev(bit1(memory_start + 4)) +
                  prev(bit2(memory_start + 4)) + prev(bit3(memory_start + 4))) == value_list[3] - 1
    }
    else if key == "Necromancy"
    {
        trigger = (bit5(memory_start) + bit6(memory_start) + bit7(memory_start) + bit0(memory_start + 1) + bit1(memory_start + 1) + bit2(memory_start + 1) + 
                  bit3(memory_start + 1) + bit4(memory_start + 1) + bit5(memory_start + 1) + bit6(memory_start + 1) + bit7(memory_start + 1) + 
                  bit0(memory_start + 2) + bit1(memory_start + 2) + bit2(memory_start + 2) + bit3(memory_start + 2) + bit4(memory_start + 2)) == value_list[3]
                  &&
                  (prev(bit5(memory_start)) + prev(bit6(memory_start)) + prev(bit7(memory_start)) + prev(bit0(memory_start + 1)) + prev(bit1(memory_start + 1)) +
                  prev(bit2(memory_start + 1)) + prev(bit3(memory_start + 1)) + prev(bit4(memory_start + 1)) + prev(bit5(memory_start + 1)) + 
                  prev(bit6(memory_start + 1)) + prev(bit7(memory_start + 1)) + prev(bit0(memory_start + 2)) + prev(bit1(memory_start + 2)) +
                  prev(bit2(memory_start + 2)) + prev(bit3(memory_start + 2)) + prev(bit4(memory_start + 2))) == value_list[3] - 1
    }
    else if key == "Ninjitsu"
    {
        trigger = (bit5(memory_start) + bit6(memory_start) + bit7(memory_start) + bit0(memory_start + 1) + bit1(memory_start + 1) + bit2(memory_start + 1) + 
                  bit3(memory_start + 1) + bit4(memory_start + 1) + bit5(memory_start + 1) + bit6(memory_start + 1) + bit7(memory_start + 1) + 
                  bit0(memory_start + 2) + bit1(memory_start + 2) + bit2(memory_start + 2) + bit3(memory_start + 2) + bit4(memory_start + 2) + 
                  bit5(memory_start + 2) + bit6(memory_start + 2) + bit7(memory_start + 2) + bit0(memory_start + 3)) == value_list[3]
                  &&
                  (prev(bit5(memory_start)) + prev(bit6(memory_start)) + prev(bit7(memory_start)) + prev(bit0(memory_start + 1)) + prev(bit1(memory_start + 1)) +
                  prev(bit2(memory_start + 1)) + prev(bit3(memory_start + 1)) + prev(bit4(memory_start + 1)) + prev(bit5(memory_start + 1)) + 
                  prev(bit6(memory_start + 1)) + prev(bit7(memory_start + 1)) + prev(bit0(memory_start + 2)) + prev(bit1(memory_start + 2)) +
                  prev(bit2(memory_start + 2)) + prev(bit3(memory_start + 2)) + prev(bit4(memory_start + 2)) + prev(bit5(memory_start + 2)) + 
                  prev(bit6(memory_start + 2)) + prev(bit7(memory_start + 2)) + prev(bit0(memory_start + 3))) == value_list[3] - 1
    }
    else if key == "War Dances"
    {
        trigger = (bit1(memory_start) + bit2(memory_start) + bit3(memory_start) + bit4(memory_start) + bit5(memory_start) + bit6(memory_start) + 
                  bit7(memory_start) + bit0(memory_start + 1)) == value_list[3]
                  &&
                  (prev(bit1(memory_start)) + prev(bit2(memory_start)) + prev(bit3(memory_start)) + prev(bit4(memory_start)) + prev(bit5(memory_start)) +
                  prev(bit6(memory_start)) + prev(bit7(memory_start)) + prev(bit0(memory_start + 1))) == value_list[3] - 1
    }
    else if key == "Songs"
    {
        trigger = (bit1(memory_start) + bit2(memory_start) + bit3(memory_start) + bit4(memory_start) + bit5(memory_start) + bit6(memory_start) + 
                  bit7(memory_start)) == value_list[3]
                  &&
                  (prev(bit1(memory_start)) + prev(bit2(memory_start)) + prev(bit3(memory_start)) + prev(bit4(memory_start)) + prev(bit5(memory_start)) +
                  prev(bit6(memory_start)) + prev(bit7(memory_start))) == value_list[3] - 1
    }
    return trigger
}

function ProcessMagics(key, value_list)
{
    trigger = always_false()
    trigger = trigger || ProcessMagicRoster(key, value_list)
    trigger = trigger || ProcessMagicBattle(key, value_list)
    return trigger
}

function MagicLearn()
{
    for key in MagicLearnedDict
    {
        value_list = MagicLearnedDict[key]
        title = value_list[4]
        description = "Learn all " + key + " magic spells."
        points = value_list[0]
        trigger = DeltaTitle() != 0 && Location() != 0 && ProcessMagics(key, value_list)
        achievement(title, description, points, trigger)
    }
}

MagicLearn()

/////Skill Mastery Cheevos
/////Skill Dict - Used for cheevo for skills mastered
/////Key - Name of Skill
/////value = [points, skill_id_value, skill_mastery_level, Cheevo Title]

SkillMasteryDict = {
    //Weapon Mastery
    "Fists":       [5, 0x01, 8, "Crushing Retribution"],
    "Daggers":     [5, 0x02, 8, "Overwhelming Assassin"],
    "Swords (1H)": [5, 0x03, 8, "Papillion Reel"],
    "Swords (2H)": [5, 0x04, 8, "Grand Cross Crusher"],
    "Axes":        [5, 0x05, 8, "Infinity Blade"],
    "Spears":      [5, 0x07, 8, "Spiral Scourge"],
    "Hammers":     [5, 0x08, 8, "The Dance of Demons"],
    "Katana (1H)": [5, 0x0a, 8, "Advent Sign"],
    "Katana (2H)": [5, 0x0b, 8, "Ghostwail"],
    "Cudgels":     [5, 0x0c, 8, "Trinity Pulse"],
    "Whips":       [5, 0x0e, 8, "Armageddon"],
    "Spellbooks":  [5, 0x0f, 8, "Book Of Devastation"],
    "Instruments": [5, 0x10, 8, "Bang The Gong"],
    "Blowguns":    [5, 0x11, 8, "Heaven's Scorn"],
    "Bows":        [5, 0x12, 8, "Empyreal Shot"],
    "Crossbows":   [5, 0x13, 8, "Deathwail"],
    "Fusils":      [5, 0x14, 8, "Scatter Shot"],
    "Thrown":      [5, 0x15, 8, "The Way of the Bola"],
    
    //Support against enemy types
    "Anatomy":     [5, 0x16, 8, "Doctor of Death"],
    "Teratology":  [5, 0x17, 8, "Master of Beasts"],
    "Herpetology": [5, 0x18, 8, "Snake Charmer"],
    "Draconology": [5, 0x19, 8, "Dragon Crusher"],
    "Sacrology":   [5, 0x1a, 8, "Divine Retribution"],
    "Daemonology": [5, 0x1b, 8, "Embrace the Umbra"],
    "Aurology":    [5, 0x1c, 8, "Faeries Wear Boots"],
    "Thanatology": [5, 0x1d, 8, "The Phantom Menace"],
    "Golemy":      [5, 0x1e, 8, "Rock Breaker"],
    
    //Support against enemy types
    "Augment Air":       [5, 0x1f, 8, "The Wind Watch"],
    "Augment Earth":     [5, 0x20, 8, "The Earth Watch"],
    "Augment Lightning": [5, 0x21, 8, "The Lightning Watch"],
    "Augment Water":     [5, 0x22, 8, "The Water Watch"],
    "Augment Fire":      [5, 0x23, 8, "The Fire Watch"],
    "Augment Ice":       [5, 0x24, 8, "The Ice Watch"],
    "Augment Light":     [5, 0x25, 8, "The Light Watch"],
    "Augment Darkness":  [5, 0x26, 8, "The Dark Watch"],
    
    //Support Skills
    "Parry":     [5, 0x27, 8, "Avoid the Strike"],
    "Deflect":   [5, 0x28, 8, "Like a Shadow"],
    "Overpower": [5, 0x29, 8, "True Striker"],
    
    //Action Skills
    "Iron Maiden":         [10, 0xdd, 8, "Valerian Torture"],
    "Feather Step":        [10, 0xde, 8, "Light as a Feather"],
    "First Aid":           [10, 0xdf, 8, "Ozma's Aid"],
    "Howl":                [05, 0xe0, 8, "Cyclops Howl"],
    "Huapango Winds":      [10, 0xe1, 8, "Staggering Cyclone"],
    "Glare":               [05, 0xe2, 8, "Gaze of the Clops"],
    "Threaten":            [05, 0xe3, 8, "Silence the Haters"],
    "Steal":               [10, 0xe4, 8, "Mann Macaeux In Real Life"],
    "Check":               [05, 0xe7, 8, "Bind Of the Snake"],
    "Black Mucus":         [10, 0xe8, 8, "Muck from the Deep"],
    "Bloody Gag":          [10, 0xe9, 8, "Silence the Heathens"],
    "Empower Golem":       [05, 0xea, 8, "Helping the Golems"],
    "Empower Dragon":      [05, 0xeb, 8, "Helping the Dragons"],
    "Empower Beast":       [05, 0xec, 8, "Helping the Beasts"],
    "Witch's Smile":       [10, 0xed, 8, "Charm of the Wicce"],
    "Irresistable Beauty": [05, 0xed, 8, "Beauty Pagaent"],
    "Meditate":            [05, 0xef, 8, "Astral Projection"],
    "Lament of the Dead":  [05, 0xf0, 8, "A Frightning Affair"],
    "Rapier Glance":       [05, 0xf1, 8, "Gaze of the Reptile"],
    "Intimidate":          [10, 0xf2, 8, "I Thought You Were Ready"],
    "Aerial Resonance":    [05, 0xf3, 8, "Wind Touched"],
    "Telluric Resonance":  [05, 0xf4, 8, "Earth Touched"],
    "Charged Resonance":   [05, 0xf5, 8, "Lighting Touched"],
    "Aquatic Resonance":   [05, 0xf6, 8, "Water Touched"],
    "Blazing Resonance":   [05, 0xf7, 8, "Fire Touched"],
    "Icy Resonance":       [05, 0xf8, 8, "Ice Touched"],
    "Luminous Resonance":  [05, 0xf9, 8, "Light Touched"],
    "Shadow Resonance":    [05, 0xfa, 8, "Dark Touched"],
    "Recruit":             [05, 0xfb, 8, "Expert Recruiter"],
    "Subdue":              [05, 0xfc, 8, "Lion Tamer"],
    "Coax":                [05, 0xfd, 8, "Parseltongue"],
    "Tame":                [05, 0xfe, 8, "True Dragoon"],
    "Seraph's Pact":       [10, 0xff, 8, "Like a God"],
    "Demon's Pact":        [10, 0x100, 8, "The Dark One"],
    "Fey Pact":            [10, 0x101, 8, "Searching For Fairy"],
    "Master Undead":       [05, 0x102, 8, "With the Dead"],
    "Control Golem":       [05, 0x103, 8, "Golemy and Golemy"],
    "Princess's Whim":     [10, 0xed, 8, "Valerian Healing"],
}

function ProcessSkillBattle(key, skill_val, skill_level)
{
    trigger = always_false()
    base_mem_char = 0xd40130	
    alliegance_offset = 0x52
    char_offset = 0x520
    skill_offset = 0xA6
    level_offset = 0x02
    exp_offset = 0x04
    alliegance_offset = 0x52
    for i in range(0, 12)
    {
        mem_char = base_mem_char + (char_offset * i)
        mem_alliegance = mem_char + alliegance_offset
        mem_skill = mem_char + skill_offset
        for j in range(0, 9)
        {
            trigger = trigger || (byte(mem_alliegance) == 0x13 && word(mem_skill) == skill_val && prev(byte(mem_skill + 2)) == skill_level - 1 
                      && byte(mem_skill + 2) == skill_level)
            mem_skill = mem_skill + 6 
        }
    }
    return trigger
}

function SkillMaster()
{
    for key in SkillMasteryDict
    {
        value_list = SkillMasteryDict[key]
        title = value_list[3]
        description = "Master the skill '" + key + "'."
        points = value_list[0]
        trigger = DeltaTitle() != 0 && Location() != 0 && InBattle() && ProcessSkillBattle(key, value_list[1], value_list[2])
        achievement(title, description, points, trigger)
    }
}

SkillMaster()

